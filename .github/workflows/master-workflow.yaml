name: master workflow

on:
  workflow_dispatch:
    inputs:
      bu:
        description: 'Select BU (e.g., adb, qoala, both, none)'
        type: choice
        options:
          - adb
          - qoala
          - both
          - none
        required: true
        default: 'none'
      consumers:
        description: 'Select Consumers (e.g., b1c1, b2c1, both, none)'
        type: choice
        options:
          - b1c1
          - b2c1
          - both
          - none
        required: true
        default: 'none'
      branch:
        description: 'Specify the branch (e.g., main, develop, etc.)'
        required: true
        default: 'main'

jobs:
  parse-and-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Define Workflow Mapping
        id: define-mapping
        run: |
          echo "b1=b1-s1" >> mapping.txt
          echo "b1 c1=b1-c1" >> mapping.txt
          echo "b2=b2-s1" >> mapping.txt
          echo "b2 c1=b2-c1" >> mapping.txt

      - name: Debug Inputs
        run: |
          echo "BU: ${{ github.event.inputs.bu }}"
          echo "Consumers: ${{ github.event.inputs.consumers }}"
          echo "Branch: ${{ github.event.inputs.branch }}"

      - name: Save Selected BU and Consumers
        id: save-inputs
        run: |
          echo "${{ github.event.inputs.bu }}" > selected_bu.txt
          echo "${{ github.event.inputs.consumers }}" > selected_consumers.txt
          echo "${{ github.event.inputs.branch }}" > selected_branch.txt

      - name: Trigger Workflows Based on Selection
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read the selected BU, Consumers, and Branch from input
            const selectedBu = fs.readFileSync('selected_bu.txt', 'utf8').trim();
            const selectedConsumers = fs.readFileSync('selected_consumers.txt', 'utf8').trim();
            const selectedBranch = fs.readFileSync('selected_branch.txt', 'utf8').trim();

            // Read workflow mappings
            const mappings = {};
            const mappingLines = fs.readFileSync('mapping.txt', 'utf8').split('\n').filter(line => line.trim());
            mappingLines.forEach(line => {
              const [key, value] = line.split('=');
              mappings[key.trim()] = value.trim();
            });

            console.log('Mappings:', mappings);
            console.log('Selected BU:', selectedBu);
            console.log('Selected Consumers:', selectedConsumers);
            console.log('Selected Branch:', selectedBranch);

            // Define workflows to trigger based on inputs
            const workflowsToTrigger = [];

            // Handle BU workflows
            if (selectedBu === 'b1' || selectedBu === 'both') {
              workflowsToTrigger.push(mappings['b1']);
            }
            if (selectedBu === 'b2' || selectedBu === 'both') {
              workflowsToTrigger.push(mappings['b2']);
            }

            // Handle Consumer workflows
            if (selectedConsumers === 'b1 c1' || selectedConsumers === 'both') {
              workflowsToTrigger.push(mappings['b1 c1']);
            }
            if (selectedConsumers === 'b2 c1' || selectedConsumers === 'both') {
              workflowsToTrigger.push(mappings['b2 c1']);
            }

            console.log('Workflows to Trigger:', workflowsToTrigger);

            // Trigger workflows in parallel
            const promises = workflowsToTrigger.map(workflowFile => {
              console.log(`Triggering workflow: ${workflowFile} on branch: ${selectedBranch}`);
              return github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFile,  // e.g., 'b1-s1' (without .yaml extension)
                ref: selectedBranch,        // e.g., 'main'
              });
            });

            // Wait for all workflows to be dispatched
            await Promise.all(promises);
            console.log('All workflows triggered successfully.');
